<?php
/**
 * Client Side Date Formatter main code.
 */

/**
 * Implements hook_field_formatter_info().
 */
function cs_date_formatter_field_formatter_info() {
  $formats = array(
    'cs_date_format' => array(
      'label' => t('Client side formatted'),
      'field types' => array(
        // These ship with the Date module.
        'date',
        'datestamp',
        'datetime',
        // @todo which additional fields?
      ),
      'settings' => array(
        'date_format' => 'simple',
        'weekday' => 'hidden',
        'year' => 'numeric',
        'month' => 'short',
        'day' => '2-digit',
        'hour' => '2-digit',
        'minute' => '2-digit',
        'second' => 'hidden',
        'timezonename' => 'short',
      ),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cs_date_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  debug($settings);
  $element['date_format'] = array(
    '#title' => t('Format'),
    '#type' => 'radios',
    '#default_value' => isset($settings['date_format']) ? $settings['date_format'] : 'simple',
    '#options' => array(
      'simple' => t('Simple'),
      'extended' => t('Extended'),
    ),
  );

  // @todo field name.
  $name_attribute = 'fields[field_a_date][settings_edit_form][settings][date_format]';
  $states = array(
    'invisible' => array(
      ':input[name="' . $name_attribute . '"]' => array('value' => 'simple'),
    ),
    'disabled' => array(
      ':input[name="' . $name_attribute . '"]' => array('value' => 'simple'),
    ),
  );
  $options = array(
    'hidden' => t('Hidden'),
  );
  $options_n2d = array(
    'numeric' => t('Numeric'),
    '2-digit' => t('Two digits'),
  );
  $options_nsl = array(
    'narrow' => t('Narrow'),
    'short' => t('Short'),
    'long' => t('Long'),
  );
  $options_sl = array_slice($options_nsl, 1);

  $element['weekday'] = array(
    '#type' => 'select',
    '#title' => t('Weekday display'),
    '#options' => array_merge($options, $options_nsl),
    '#default_value' => isset($settings['weekday']) ? $settings['weekday'] : 'hidden',
    '#states' => $states,
  );
  $element['year'] = array(
    '#type' => 'select',
    '#title' => t('Year display'),
    '#options' => array_merge($options, $options_n2d),
    '#default_value' => isset($settings['year']) ? $settings['year'] : 'numeric',
    '#states' => $states,
  );
  $element['month'] = array(
    '#type' => 'select',
    '#title' => t('Month display'),
    '#options' => array_merge($options, $options_n2d, $options_nsl),
    '#default_value' => isset($settings['month']) ? $settings['month'] : 'short',
    '#states' => $states,
  );
  $element['day'] = array(
    '#type' => 'select',
    '#title' => t('Day display'),
    '#options' => array_merge($options, $options_n2d),
    '#default_value' => isset($settings['day']) ? $settings['day'] : '2-digit',
    '#states' => $states,
  );
  $element['hour'] = array(
    '#type' => 'select',
    '#title' => t('Hour display'),
    '#options' => array_merge($options, $options_n2d),
    '#default_value' => isset($settings['hour']) ? $settings['hour'] : '2-digit',
    '#states' => $states,
  );
  $element['minute'] = array(
    '#type' => 'select',
    '#title' => t('Minute display'),
    '#options' => array_merge($options, $options_n2d),
    '#default_value' => isset($settings['minute']) ? $settings['minute'] : '2-digit',
    '#states' => $states,
  );
  $element['second'] = array(
    '#type' => 'select',
    '#title' => t('Seconds display'),
    '#options' => array_merge($options, $options_n2d),
    '#default_value' => isset($settings['second']) ? $settings['second'] : 'hidden',
    '#states' => $states,
  );
  $element['timezonename'] = array(
    '#type' => 'select',
    '#title' => t('Timezone name display'),
    '#options' => array_merge($options, $options_sl),
    '#default_value' => isset($settings['timezonename']) ? $settings['timezonename'] : 'short',
    '#states' => $states,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cs_date_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = 'Let the browser render the date (requires Javascript)';
  if ($settings == 'simple') {
   // @todo.
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function cs_date_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'cs_date_format':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'cs_date_formatter_default',
          '#element' => $item,
          '#field' => $instance,
        );

        // Attach our Javascript and settings.
        $element[$delta]['#attached']['js'][] = array(
          'data' => backdrop_get_path('module', 'cs_date_formatter') . '/js/cs-date-formatter.js',
          'type' => 'file',
        );
        $js_settings = array();
        if ($settings['date_format'] == 'extended') {
          $js_settings['date_format'] = 'extended';
          $js_settings['extended'] = array_filter($settings, function($value) {
            return ($value != 'hidden' && $value != 'extended');
          });
        }
        else {
          $js_settings['date_format'] = 'simple';
          $js_settings['extended'] = array();
        }
        // @todo does this work with several fields with different settings?
        $element[$delta]['#attached']['js'][] = array(
          'data' => array(
            'csDateFormatter' => array($field['field_name'] => $js_settings),
          ),
          'type' => 'setting',
        );
      }
      break;

  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function cs_date_formatter_theme($existing, $type, $theme, $path) {
  return array(
    'cs_date_formatter_default' => array(
      'variables' => array(
        'element' => NULL,
        'field' => NULL,
      ),
    ),
  );
}

/**
 * Custom theme function.
 */
function theme_cs_date_formatter_default($variables) {
  // @todo it's not always a timestamp.
  $value = $variables['element']['value'];
  // @todo make fallback format configurable?
  $fallback = format_date($value, 'html_datetime');
  $attributes = array(
    'datetime' => $fallback,
    'class' => array('cs-date-format'),
    'data-cs-timestamp' => $value,
    'data-cs-setting-name' => $variables['field']['field_name'],
  );
  $markup = '<time ' . backdrop_attributes($attributes) . '>' . $fallback . '</time>';

  return $markup;
}
